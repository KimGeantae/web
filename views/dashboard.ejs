<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>대시보드</title>
    <link rel="stylesheet" href="/main.css">
    <script src="https://cdn.jsdelivr.net/npm/roslib/build/roslib.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/ros3d/build/ros3d.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/eventemitter2/lib/eventemitter2.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three/build/three.min.js"></script>
</head>
<body>
    <div class="container">
        <div class="left-panel">
            <div class="camera-box">
                <img src="" alt="Camera Image" class="camera-image" id="camera-stream"> <!-- 카메라 이미지 -->
            </div>
            <div class="speed-box">
                <p>Speed: <span id="speed">0.0 km/h</span></p> <!-- 속도 표시 -->
            </div>
            <div class="controls">
                <button class="arrow-button" id="increase-speed">↑</button>
                <div class="horizontal-controls">
                    <button class="arrow-button">←</button>
                    <button class="arrow-button">→</button>
                </div>
                <button class="arrow-button" id="decrease-speed">↓</button>
            </div>
        </div>
        <div class="map-box">
            <p>맵</p>
            <div id="map" style="width: 100%; height: 100%;"></div> <!-- 맵을 표시할 박스 -->
        </div>
    </div>
    <script>
        let speed = 0.0;

        // ROS와 연결
        const ros = new ROSLIB.Ros({
            url: 'ws://localhost:9090' // rosbridge 서버와 WebSocket 연결
        });

        ros.on('connection', function() {
            console.log('Connected to websocket server.');
        });

        ros.on('error', function(error) {
            console.log('Error connecting to websocket server:', error);
        });

        ros.on('close', function() {
            console.log('Connection to websocket server closed.');
        });
	
	const webcamImage = document.getElementById('camera-stream');
	
        // 이미지 구독
        const imageTopic = new ROSLIB.Topic({
            ros: ros,
            name: '/webcam/image_processed', // 구독할 이미지 토픽
            messageType: 'std_msgs/String' // 메시지 타입
        });

	imageTopic.subscribe(function(message) {
		const imageData = 'data:image/jpeg;base64,' + message.data;
		webcamImage.src = imageData;
	});

        // RViz 뷰어 생성
        const viewer = new ROS3D.Viewer({
            divID: 'map',
            width: document.getElementById('map').clientWidth, // 부모 div의 너비
            height: document.getElementById('map').clientHeight, // 부모 div의 높이
            antialias: true
        });

        // TF Client 설정
        const tfClient = new ROSLIB.TFClient({
            ros: ros,
            angularThres: 0.01,
            transThres: 0.01,
            rate: 10.0,
            fixedFrame: '/map' // 맵을 기준으로 설정
        });

        // Map 정보 표시
        const gridClient = new ROS3D.OccupancyGridClient({
            ros: ros,
            rootObject: viewer.scene,
            tfClient: tfClient,
            continuous: true,
            topic: '/map' // 사용할 map 토픽 이름
        });

        // 마커 클라이언트 설정
        const markerClient = new ROS3D.MarkerClient({
            ros: ros,
            tfClient: tfClient,
            rootObject: viewer.scene,
            topic: '/visualization_marker' // 마커를 받을 토픽
        });

        // 속도 증가 함수
        function increaseSpeed() {
            speed += 0.1; // 속도 증가
            updateSpeedDisplay();
        }

        // 속도 감소 함수
        function decreaseSpeed() {
            speed -= 0.1; // 속도 감소
            updateSpeedDisplay();
        }

        // 속도 표시 업데이트 함수
        function updateSpeedDisplay() {
            document.getElementById('speed').innerText = speed.toFixed(1) + ' km/h';
        }

        // TF 변환을 표시할 함수
        function displayTF() {
            tfClient.subscribe('/tf', function(tf) {
                tf.transforms.forEach(transform => {
                    const position = transform.transform.translation;
                    const rotation = transform.transform.rotation;

                    // 마커 추가
                    addMarker(position);
                });
            });
        }

        // 마커 추가 함수
        function addMarker(position) {
            const marker = new ROS3D.Arrow({
                size: 0.1,
                color: 0x00ff00,
                pose: {
                    position: {
                        x: position.x,
                        y: position.y,
                        z: position.z
                    },
                    orientation: { x: 0, y: 0, z: 0, w: 1 }
                }
            });
            viewer.scene.add(marker);
        }

        // 버튼 클릭 이벤트 리스너 추가
        displayTF();
        document.getElementById('increase-speed').addEventListener('click', increaseSpeed);
        document.getElementById('decrease-speed').addEventListener('click', decreaseSpeed);
    </script>
</body>
</html>

